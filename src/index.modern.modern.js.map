{"version":3,"file":"index.modern.modern.js","sources":["index.js"],"sourcesContent":["function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = _interopDefault(require('react'));\nvar styled = _interopDefault(require('styled-components'));\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nvar logError = function logError(message) {\n  throw new Error(\"Stylism: \" + message);\n};\n\nvar _templateObject;\n\nvar GradientText = function GradientText(props) {\n  var children = props.children,\n      _props$degree = props.degree,\n      degree = _props$degree === void 0 ? 45 : _props$degree,\n      startColor = props.startColor,\n      endColor = props.endColor,\n      hasHover = props.hasHover,\n      transitionTime = props.transitionTime;\n  if (!startColor || !endColor) logError(\"'startColor' or 'endColor' cannot be empty!\");\n  var hoverStyles = \"\\n    background-position: left;\\n    background-size: 200%;\\n    :hover {\\n      background-position: right;\\n    }\\n  \";\n\n  var transitionStyles = function transitionStyles(time) {\n    return \"\\n    transition: all \" + time + \"ms ease;\\n  \";\n  };\n\n  var MyStyle = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    color: transparent;\\n    background-image: linear-gradient(\", \"deg, \", \", \", \");\\n    background-clip: text;\\n    background-position: center;\\n    background-size: 100%;\\n    \", \"\\n    \", \"\\n  \"])), degree, startColor, endColor, hasHover ? hoverStyles : '', transitionTime ? transitionStyles(transitionTime) : '');\n  return /*#__PURE__*/React.createElement(MyStyle, null, children);\n};\n\nvar _templateObject$1;\n\nvar ButtonGradient = function ButtonGradient(props) {\n  var children = props.children,\n      _props$degree = props.degree,\n      degree = _props$degree === void 0 ? 45 : _props$degree,\n      _props$textColor = props.textColor,\n      textColor = _props$textColor === void 0 ? '#fff' : _props$textColor,\n      startColor = props.startColor,\n      endColor = props.endColor,\n      hasHover = props.hasHover,\n      transitionTime = props.transitionTime,\n      fontSize = props.fontSize,\n      style = props.style;\n  if (!startColor || !endColor) logError(\"'startColor' or 'endColor' cannot be empty!\");\n  var hoverStyles = \"\\n    background-position: left;\\n    background-size: 200%;\\n    :hover, :focus {\\n      background-position: right;\\n    }\\n  \";\n\n  var transitionStyles = function transitionStyles(time) {\n    return \"\\n    transition: all \" + time + \"ms ease;\\n  \";\n  };\n\n  var MyStyle = styled.button(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteralLoose([\"\\n    color: \", \";\\n    outline: 0 !important;\\n    border: 0 !important;\\n    cursor: pointer;\\n    font-size: \", \";\\n    background-image: linear-gradient(\", \"deg, \", \", \", \");\\n    background-position: center;\\n    background-size: 100%;\\n    \", \"\\n    \", \"\\n    \", \"\\n  \"])), textColor, fontSize || '1em', degree, startColor, endColor, hasHover ? hoverStyles : '', transitionTime ? transitionStyles(transitionTime) : '', style || '');\n  return /*#__PURE__*/React.createElement(MyStyle, null, children);\n};\n\nexports.ButtonGradient = ButtonGradient;\nexports.GradientText = GradientText;\n//# sourceMappingURL=index.js.map\n"],"names":["logError"],"mappings":";;;;;;;;;;;;;;;;;AAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,OAAA,EAAa;AACnC,QAAM,IAAA,KAAA,CAAA,cAAN,OAAM,CAAN;AADK,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}